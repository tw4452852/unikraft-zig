$(eval $(call addlib,appzig))

HOST_ARCH ?= x86_64
HOST_OS ?= linux
ZIG_VERSION ?= 0.15.0-dev.386+2e35fdd03

ZIG_URL=https://ziglang.org/builds/zig-$(HOST_OS)-$(HOST_ARCH)-$(ZIG_VERSION).tar.xz
$(eval $(call fetch,zig,$(ZIG_URL)))

ZIG_PATCHDIR=$(APPZIG_BASE)/patches
$(eval $(call patch,zig,$(ZIG_PATCHDIR),zig-$(HOST_OS)-$(HOST_ARCH)-$(ZIG_VERSION))) 
ZIG_BIN ?= $(ZIG_ORIGIN)/zig-$(HOST_OS)-$(HOST_ARCH)-$(ZIG_VERSION)/zig

APP_ZIG_OBJ := $(APPZIG_BASE)/zig-out/lib/app_zig.o
LIB_ZIG := $(APPZIG_BASE)/zig-out/lib/libzig.a

ifeq ($(CONFIG_ARCH_X86_64),y)
ZIG_TARGET := x86_64-linux-musl
else ifeq ($(CONFIG_ARCH_ARM_64),y)
ZIG_TARGET := aarch64-linux-musl
else
$(error unsupported architecture)
endif

.PHONY: zig_build

zig_build: $(ZIG_BIN) $(BUILD_DIR)/zig/.patched
	$(ZIG_BIN) build -Dtarget=$(ZIG_TARGET) -Dtest=$(CONFIG_APPZIG_TEST_PATH) -Dtest_filter=$(CONFIG_APPZIG_TEST_FILTER)

UK_PREPARE-y += zig_build

$(APP_ZIG_OBJ) $(LIB_ZIG): zig_build

UK_OLIBS-y += $(APP_ZIG_OBJ)
UK_ALIBS-y += $(LIB_ZIG)
